# Defaults tasks for role odcs-frontend

---

- name: Importing specific distro variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - vars
    - always

- include_role:
    name: baseline
    tasks_from: buildtools_repo
  tags:
    - repo

- name: install the packages required for ODCS
  package:
    name: "{{ odcs_frontend_pkgs_list }}"
    state: installed
    update_cache: yes
  notify:
    - restart httpd service

- include_role:
    name: httpd
  vars:
    - httpd_tls: True

########
# Need to add the messaging part

- name: set selinux booleans for httpd
  seboolean: 
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items:
    - "httpd_can_network_connect_db"
    - "httpd_can_network_connect"
  tags:
  - odcs

- name: modify selinux so that httpd can serve data from NFS shares if needed
  seboolean: 
    name: httpd_use_nfs
    state: yes
    persistent: yes
  when: "'enabled' in ansible_selinux.status"
  tags:
  - odcs

- name: create local folders when nfs_create_local_folders is set
  file:
    path: "{{ item.path }}"
    state: directory
  loop: "{{ nfs_mounts }}"

- name: mount filesystems
  mount:
    name: "{{ item.path }}"
    src: "{{ item.src }}"
    fstype: nfs
    state: "{{ item.state|default('mounted') }}"
    opts: "{{ item.opts }}"
  with_items: "{{ nfs_mounts }}"
  when:
  - nfs_mounts|length > 0
  - item.path is defined
  - item.src is defined
  - item.path
  - item.src

- name: create odcs-server group
  group:
    name: odcs-server
    gid: 64321
    state: present
 
- name: create odcs-server user
  user:
    name: odcs-server
    uid: 64321
    group: odcs-server

- name: Add apache user to odcs-server group.	
  user:	
    name: apache	
    groups: odcs-server	
    append: yes

- name: create ODCS_TARGET_DIR
  file:
    path: "{{ odcs_target_dir }}"
    state: directory
    owner: odcs-server
    group: odcs-server
    mode: 0775
  tags:
  - odcs

- name: generate the ODCS app config
  template:
    src: etc/odcs/config.py.j2
    dest: /etc/odcs/config.py
    owner: odcs-server
    group: odcs-server
    mode: 0440
  notify:
    - reload httpd service
  tags:
  - odcs
  - config

- name: generate the ODCS Apache configs
  template:
    src: "etc/httpd/conf.d/{{ item }}.j2"
    dest: "/etc/httpd/conf.d/{{ item }}"
    owner: apache
    group: apache
    mode: 0440
  with_items:
    - odcs.conf
    - 30_composefiles.conf
    - 35_download.conf
  notify:
  - reload httpd service
  tags:
  - odcs

- name: ODCS rabbitmq private queue TLS files
  copy:
    src: "{{ pkistore }}/rabbitmq-private/{{ item }}"
    dest: "/etc/odcs/{{ item }}"
    owner: odcs-server
    mode: 0640
  with_items:
    -  "{{ odcs_rabbitmq_queue_tls_file }}.crt"
    -  "{{ odcs_rabbitmq_queue_tls_file }}.key"
  tags:
    - odcs
    - tls
 

- name: ODCS fedora-messaging rabbitmq TLS files
  copy:
    src: "{{pkistore}}/fedora-messaging/odcs/{{ item }}"
    dest: "/etc/odcs/{{ item }}"
    owner: odcs-server
    mode: 0640
  with_items:
    - "{{ odcs_fedora_messaging_tls_file }}.key"
    - "{{ odcs_fedora_messaging_tls_file }}.crt"
  tags:
    - odcs
    - tls
 
- name: copy the odcs rabbitmq CA cert.
  copy:
    src: "{{pkistore}}/fedora-messaging/ca.crt"
    dest: /etc/odcs/ca.crt
    owner: odcs-server
    group: apache
    mode: 0640
  tags:
  - odcs

- name: generate the fedora-messaging config
  template:
    src: fedora-messaging.toml.j2
    dest: /etc/fedora-messaging/config.toml
    owner: root
    group: root
    mode: 0644
  tags:
    - odcs
    - config

- name: install the http keytab
  copy:
    src: "{{pkistore}}/odcs/http-{{ odcs_frontend_hostname }}"
    dest: "/etc/httpd/conf/http-{{ odcs_frontend_hostname }}.keytab"
    owner: apache
    group: apache
    mode: 0440
  when: odcs_auth_backend == "kerberos" or odcs_auth_backend == "kerberos_or_ssl"
  notify:
  - reload httpd service
  tags:
  - odcs

- name: install the httpd TLS cert
  copy:
    src: "{{pkistore}}/{{ odcs_frontend_hostname }}.crt"
    dest: "/etc/pki/tls/certs/{{ odcs_frontend_hostname }}.crt"
    owner: apache
    group: apache
    mode: 0440
  notify:
  - reload httpd service
  tags:
  - odcs

- name: install the httpd TLS key
  copy:
    src: "{{pkistore}}/{{ odcs_frontend_hostname }}.key"
    dest: "/etc/pki/tls/private/{{ odcs_frontend_hostname }}.key"
    owner: apache
    group: apache
    mode: 0440
  notify:
  - reload httpd service
  tags:
  - odcs

- name: install any CAs
  copy:
    src: "{{pkistore}}/{{ odcs_frontend_ca_crt}}"
    dest: "/etc/pki/tls/certs/{{ odcs_frontend_ca_crt }}"
    owner: apache
    group: apache
    mode: 0440
  notify:
  - reload httpd service
  tags:
  - odcs

- name: Disable PrivateTmp=true in httpd.service.
  lineinfile:
    path: /usr/lib/systemd/system/httpd.service
    regexp: '^PrivateTmp'
    line: 'PrivateTmp=false'
  notify:
  - reload systemd
  - restart httpd service
  tags:
  - odcs

- name: Install the ODCS Cleanup systemd service
  copy:
    src: "odcs-celery-cleanup.service"
    dest: "/etc/systemd/system/odcs-celery-cleanup.service"
    owner: root
    group: root
    mode: 0644
  register: odcs_cleanup_systemd
  notify: 
    - restart_odcs_celery_cleanup
  tags:
    - odcs
    - odcs-cleanup

- name: Let systemd know about new odcs-cleanup
  systemd:
    daemon_reload: yes
  when: odcs_cleanup_systemd is changed
  tags:
    - odcs-cleanup


- name: start ODCS frontend
  systemd:
    name: httpd
    state: started
  tags:
  - odcs

- name: start the ODCS Cleanup service
  systemd:
    name: "odcs-celery-cleanup"
    state: started
    enabled: true
  tags:
    - odcs
    - odcs-cleanup

- include_role:
    name: vsftpd
  vars:
    vsftpd_anonymous: True
    vsftpd_selinux_booleans:
      - ftpd_full_access
      - ftpd_use_nfs
      - ftpd_use_passive_mode
    vsftpd_anonymous_chroot: "{{ odcs_target_dir }}"
  when: odcs_frontend_ftpd 

- block:
    - name: Configuring zabbix agent
      include_role:
        name: zabbix-server
        tasks_from: agent_config
      vars:
        zabbix_templates: "{{ zabbix_odcs_templates }}"
        zabbix_groups: "{{ zabbix_odcs_groups }}"
  delegate_to: "{{ zabbix_api_srv }}"
  tags:
    - monitoring
  when:
    - zabbix_api_srv is defined
    - zabbix_monitoring

- block:
    - name: Distribute TLS validity check script
      template:
        src: odcs-tls-check.j2
        dest: /usr/libexec/centos/odcs-tls-check
        mode: '0750'
        owner: root
    - name: Reporting TLS validity value to zabbix
      cron:
        name: odcs tls cert check
        job: /usr/libexec/centos/odcs-tls-check
        minute: '*/30'

  tags:
    - monitoring
