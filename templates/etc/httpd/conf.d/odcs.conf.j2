<VirtualHost *:80>
ServerName {{ odcs_frontend_hostname }}
# Force SSL
RewriteEngine On
# allow http access for zabbix status checks
RewriteCond %{REQUEST_URI} !=/server-status
# allow http access so that you can do netinstalls internally
RewriteCond %{REQUEST_URI} !^/composes.*
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

</VirtualHost>

NameVirtualHost *:443
SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin
SSLHonorCipherOrder on
SSLProtocol all -SSLv3 -SSLv3

SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW:!aNULL:!eNULL:!DES:!MD5:!PSK:!RC4

<VirtualHost *:443>
ServerName {{ odcs_frontend_hostname }}
WSGIDaemonProcess odcs user=odcs-server group=apache threads=5
WSGIScriptAlias /{{ odcs_endpoint }} /usr/share/odcs/odcs.wsgi

SSLEngine on

SSLCertificateFile /etc/pki/tls/certs/{{ odcs_frontend_hostname }}.crt
SSLCertificateKeyFile /etc/pki/tls/private/{{ odcs_frontend_hostname }}.key
SSLCertificateChainFile /etc/pki/tls/certs/{{ odcs_frontend_ca_crt }}

ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn

{% if odcs_auth_backend == 'ssl' or odcs_auth_backend == 'kerberos_or_ssl' %}
# By default, do not require SSL verification.
SSLVerifyClient none
SSLCACertificateFile /etc/pki/tls/certs/fas-ca.crt
SSLUserName SSL_CLIENT_S_DN_CN
{% endif %}
</VirtualHost>

<Directory /usr/share/odcs>
    WSGIProcessGroup odcs
    WSGIApplicationGroup %{GLOBAL}

    {% if odcs_allowed_named_hosts or odcs_allowed_hosts %}
    <RequireAny>
        Require method GET
        {{ 'Require host ' ~ odcs_allowed_named_hosts|join(' ') if odcs_allowed_named_hosts else '' }}

        {{ 'Require ip ' ~ odcs_allowed_hosts|join(' ') if odcs_allowed_hosts else '' }}

    </RequireAny>
    {% endif %}

    {% if odcs_auth_backend == "kerberos" or odcs_auth_backend == "kerberos_or_ssl" %}
    AuthType GSSAPI
    AuthName "Kerberos negotiate authentication based on GSSAPI"
    GssapiCredStore keytab:/etc/httpd/conf/http-{{ odcs_frontend_hostname }}.keytab
    {% endif %}

    {% if odcs_auth_backend == "kerberos_or_ssl" or odcs_auth_backend == "ssl" %}
    SSLVerifyClient optional
    SSLVerifyDepth 10
    SSLOptions +stdEnvVars
    {% endif %}

    <RequireAny>
        {% if odcs_auth_backend == "kerberos" or odcs_auth_backend == "kerberos_or_ssl" %}
        Require valid-user
        {% endif %}

        {% if odcs_auth_backend == "kerberos_or_ssl" or odcs_auth_backend == "ssl" %}
        Require ssl-verify-client
        {% endif %}

        {% if odcs_auth_backend == "noauth" and not odcs_allowed_named_hosts and not odcs_allowed_hosts %}
        Require all granted
        {% endif %}
    </RequireAny>

</Directory>

Alias "/composes" "{{ odcs_target_dir }}"
<Directory {{ odcs_target_dir }}>
    {% if odcs_allowed_named_hosts or odcs_allowed_hosts %}
    <RequireAny>
        Require method GET
        {{ 'Require host ' ~ odcs_allowed_named_hosts|join(' ') if odcs_allowed_named_hosts else '' }}

        {{ 'Require ip ' ~ odcs_allowed_hosts|join(' ') if odcs_allowed_hosts else '' }}

    </RequireAny>
    {% else %}
    Require all granted
    {% endif %}

    Options +Indexes
    IndexOptions NameWidth=* FancyIndexing
    AddDescription "{{ inventory_hostname }}" server.id
    HeaderName /centos-design/header-centos.html
    IndexIgnoreReset ON
    IndexIgnore *~ *# HEADER* README* RCS CVS *,v *,t FOOTER.html
</Directory>

# Enable access to metrics to unauthenticated users
<Location "/api/1/metrics">
  SSLVerifyClient none
  Require all granted
</Location>

# to enable zabbix apache stats collection
<Location "/server-status">
   Require all granted
   Require ip 127.0.0.1
</Location>
